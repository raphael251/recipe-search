{"version":3,"sources":["components/Form.js","components/Recipes.js","App.js","components/Recipe.js","components/Router.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","getRecipe","style","marginBottom","type","name","className","Recipes","recipes","map","recipe","key","recipe_id","src","image_url","alt","title","length","concat","substring","publisher","react_router_dom","to","pathname","state","API_KEY","process","App","componentDidMount","jsonData","localStorage","getItem","recipesJson","JSON","parse","_this","setState","componentDidUpdate","stringify","setItem","_callee","e","recipeName","api_call","data","regenerator_default","wrap","_context","prev","next","target","elements","value","preventDefault","fetch","sent","json","stop","components_Form","this","components_Recipes","React","Component","Recipe","activeRecipe","RECIPE_ID","result","match","params","id","href","publisher_url","Router","basename","react_router","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.65bc7d08.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = props => (\n    <form onSubmit={props.getRecipe} style={{ marginBottom: \"2rem\" }}>\n        <input type=\"text\" name=\"recipeName\" className=\"form__input\" />\n        <button className=\"form__button\">Search</button>\n    </form>\n);\n\nexport default Form;","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst Recipes = (props) => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                { props.recipes.map(recipe => {\n                    return (\n                        <div key={recipe.recipe_id} className=\"col-md-4\" style={{ marginBottom: '2rem' }}>\n                            <div className=\"recipes__box\">\n                                <img\n                                    className=\"recipe__box-img\"\n                                    src={recipe.image_url} \n                                    alt={recipe.title} />\n                                <div className=\"recipe__text\">\n                                    <h5 className=\"recipes__title\">\n                                        { recipe.title.length < 15 ? `${ recipe.title }` : `${ recipe.title.substring(0, 25) }...` }\n                                    </h5>\n                                    <p className=\"recipes__subtitle\">Publisher: <span>{ recipe.publisher }</span></p>\n                                </div>\n                                <button className=\"recipe_buttons\">\n                                    <Link to={{ \n                                        pathname: `/recipe/${recipe.recipe_id}`,\n                                        state: {\n                                            recipe: recipe.title\n                                        }\n                                    }}>View Recipe</Link>\n                                </button>\n                            </div>\n                        </div>\n                    );\n                }) }\n            </div>\n        </div>\n    );\n};\n\nexport default Recipes;","import React from 'react';\n\nimport './App.css';\n\nimport Form from './components/Form';\nimport Recipes from './components/Recipes';\n\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nclass App extends React.Component {\n  state = {\n    recipes: []\n  }\n  componentDidMount = () => {\n    const jsonData = localStorage.getItem('recipes');\n    const recipesJson = JSON.parse(jsonData);\n    \n    recipesJson ? this.setState({ recipes: recipesJson }) : this.setState({ recipes: [] });\n  }\n  componentDidUpdate = () => {\n    const recipes = JSON.stringify(this.state.recipes);\n    localStorage.setItem('recipes', recipes);\n  }\n  getRecipe = async (e) => {\n    const recipeName = e.target.elements.recipeName.value;\n    e.preventDefault();\n    const api_call = await fetch(`https://www.food2fork.com/api/search?key=${API_KEY}&q=${recipeName}&page=1 `);\n    const data = await api_call.json();\n    \n    this.setState({\n      recipes: data.recipes\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Recipe Search</h1>\n        </header>\n        <Form getRecipe={this.getRecipe} />\n        <Recipes recipes={this.state.recipes} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst API_KEY = process.env.REACT_APP_API_KEY ;\n\nclass Recipe extends React.Component {\n    state = {\n        activeRecipe: []\n    }\n\n    componentDidMount = async () => {\n        const RECIPE_ID = this.props.match.params.id;\n\n        const getRecipe = await fetch(`https://www.food2fork.com/api/get?key=${API_KEY}&rId=${RECIPE_ID}`);\n        const result = await getRecipe.json();\n\n        this.setState({ activeRecipe: result.recipe });\n    }\n\n    render() {\n        const recipe = this.state.activeRecipe;\n        return (\n            <div className=\"container\">\n                { this.state.activeRecipe.length !== 0 &&\n                    <div className=\"active-recipe\">\n                        <img\n                            className=\"active-recipe__image\"\n                            src={recipe.image_url}\n                            alt={recipe.title} />\n                        <h3 className=\"active-recipe__title\">{ recipe.title }</h3>\n                        <h4 className=\"active-recipe__publisher\">\n                            Publisher: <span>{ recipe.publisher }</span>\n                        </h4>\n                        <p className=\"active-recipe__website\">Website: \n                            <span><a href={ recipe.publisher_url }>{ recipe.publisher_url }</a></span>\n                        </p>\n                        <button className=\"active-recipe__button\">\n                            <Link to=\"/\">Go Home</Link>\n                        </button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Recipe;","\nimport React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport App from '../App';\nimport Recipe from './Recipe';\n\nconst Router = () => (\n    <BrowserRouter basename=\"/raphael251\" >\n        <Switch>\n            <Route path=\"/\" exact component={App} />\n            <Route path=\"/recipe/:id\" component={Recipe} />\n        </Switch>\n    </BrowserRouter>\n);\n\nexport default Router;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}